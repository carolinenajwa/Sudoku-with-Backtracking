#include <iostream>
//#include <Windows.h>
#include <stdio.h>
#include<stdlib.h>

#include <iostream>
#include <regex>
#include <string>
#include <vector>

bool debug = false;
int delay = 1; //delay in ms

using namespace std;

int current = 0;
bool solved = false;
int grid[9][9] = { };

int fixedcoordinates[9][9] = { {0,0,0, 0,0,0, 0,0,0},{0,0,0, 0,0,0, 0,0,0},{0,0,0, 0,0,0, 0,0,0},{0,0,0, 0,0,0, 0,0,0},{0,0,0, 0,0,0, 0,0,0},{0,0,0, 0,0,0, 0,0,0},{0,0,0, 0,0,0, 0,0,0},{0,0,0, 0,0,0, 0,0,0},{0,0,0, 0,0,0, 0,0,0}, };

void fillArray(int grid[][9])
{
	string userInput;
	cout << "Enter String" << endl;
	cin >> userInput;

	if (userInput.size() < 81)
		throw runtime_error("Error");
	if (userInput.size() > 81)
		userInput = userInput.substr(0, 81);

	cout << "you entered " << userInput << '\n';

	for (int row = 0; row < 9; row++) {
		for (int col = 0; col < 9; col++) {
			// grid[row][col] = userInput[row * LG_GRID + col];
			grid[row][col] = userInput.at(row * 9 + col);
			// both lines above will work however `string.at()` will throw an out of range exception.
		}
	}
}

void displayArray(int grid[][9]) {
	for (int row = 0; row < 9; row++) {
		for (int col = 0; col < 9; col++) {
			std::cout << grid[row][col] << " ";
		}
		std::cout << '\n';
	}
}

//void interactiveSudokuFill(int grid) {
//
//	for (int y = 0; y < 9; y++) {
//		for (int x = 0; x < 9; x++) {
//			string theString;
//			cout << "Write the value to place in Sudoku[" << y << "][" << x << "] :" << endl;
//			std::getline(cin, theString);
//			int nr = atoi(theString.c_str());
//			grid[y][x] = nr;
//			system("cls");
//
//		}
//
//	}
//}


//void printgrid(int grid[9][9]) {
//	for (int i = 0; i < 9; i++) {
//		for (int o = 0; o < 9; o++) {
//			std::cout << grid[i][o] << " ";
//			if ((o + 1) % 3 == 0 && o != 8) std::cout << "| ";
//			if (o == 8) std::cout << std::endl;
//		}
//		if ((i + 1) % 3 == 0 && i != 8) std::cout << "----- + ----- + -----" << std::endl;
//	}
//	if (debug) std::cout << std::endl;
//}

void issolved(int grid[9][9]) {
	solved = true;
	for (int i = 0; i < 9; i++) {
		for (int o = 0; o < 9; o++) {
			if (grid[i][o] == 0) {
				solved = false;
			}
		}
	}
}

int getfixedkeys(int grid[9][9]) {
	for (int i = 0; i < 9; i++) {
		for (int o = 0; o < 9; o++) {
			if (grid[i][o] != 0) {
				fixedcoordinates[i][o] = 1;
			}
		}
	}
	return 666;
}

bool bt = false;

int check(int row, int col, int startwith) {
	if (fixedcoordinates[row][col] != 0) {
		if (bt) {
			current--;
			if (row == 0 && col == 0) {
				std::cout << "UNSOLVABLE...";
				exit(666);
			}
		}
		else {
			current++;
		}
		return 1;
	}
	int av[9] = { 1,2,3,4,5,6,7,8,9 };
	for (int a = 0; a < 9; a++) {
		if (a + 1 < startwith) {
			av[a] = -1;
		}
	}
	for (int i = 0; i < 9; i++) {
		if (grid[row][i] != 0) {
			av[grid[row][i] - 1] = -1;
		}
	}
	for (int o = 0; o < 9; o++) {
		if (grid[o][col] != 0) {
			av[grid[o][col] - 1] = -1;
		}
	}

	int rbox = row / 3 * 3;
	int cbox = col / 3 * 3;
	if (debug) std::cout << rbox << ", " << cbox << std::endl;
	for (int b = rbox; b < rbox + 3; b++) {
		for (int t = cbox; t < cbox + 3; t++) {
			if (debug) std::cout << grid[b][t] << " ";
			if (grid[b][t] != 0) {
				av[grid[b][t] - 1] = -1;
			}
		}
		if (debug) std::cout << std::endl;
	}

	bool found = false;
	for (int x = 0; x < 9; x++) {
		if (av[x] != -1) {
			if (found == false) {
				found = true;
				grid[row][col] = av[x];
				if (debug) std::cout << "possible value for " << row << "," << col << " -> " << av[x] << std::endl;
				if (debug) std::cout << row << "," << col << std::endl;
			}
			else
			{
			}
		}
		if (debug) std::cout << av[x] << " + ";
	}
	if (debug) std::cout << std::endl;
	if (av[1] == -1 && av[2] == -1 && av[3] == -1 && av[4] == -1 && av[5] == -1 && av[6] == -1 && av[7] == -1 && av[8] == -1 && av[0] == -1) {
		current--;
		if (debug) displayArray(grid);
		issolved(grid);
		bt = true;
		grid[row][col] = 0;
		if (row == 0 && col == 0) {
			std::cout << "UNSOLVABLE...";
			exit(666);
		}
		if (debug) std::cout << "backtrack" << std::endl;
		return 0;
	}
	else {
		current++;
		if (debug) displayArray(grid);
		issolved(grid);
		bt = false;
		if (debug) std::cout << "checking next" << std::endl;
		return 1;
	}
}

void solve(int grid[9][9]) {
	int crow = current / 9;
	int ccol = current % 9;
	int wat = check(crow, ccol, grid[crow][ccol] + 1);
	while (solved == false) {
		Sleep(delay);
		int crow = current / 9;
		int ccol = current % 9;
		if (debug) std::cout << "coordinates " << crow << "," << ccol << std::endl;
		int wat = check(crow, ccol, grid[crow][ccol] + 1);
	}
	displayArray(grid);
	std::cout << "SOLVED!";
}

int main()
{
	std::cout << "current grid:" << std::endl;
	fillArray(grid);
	displayArray(grid);
	std::cout << "\ngathering fixed keys" << std::endl;
	std::cout << "solving using backtracking algorithm\n" << std::endl;
	getfixedkeys(grid);

	solve(grid);

	return 666;
}
